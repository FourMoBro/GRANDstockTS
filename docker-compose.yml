version: "3.8"

services:
    neo4j:
        container_name: neo4j_gdb
        image: neo4j:4.3.0-enterprise
        restart: unless-stopped
        volumes: 
            - ./dbs/neo4j/data:/data
            - ./dbs/neo4j/import:/import
            - ./dbs/neo4j/plugins:/plugins
            - ./dbs/neo4j/conf:/conf
        ports:
            - 7474:7474
            - 7687:7687
        environment:
            - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
            - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
            - NEO4JLABS_PLUGINS=["apoc", "graph-data-science"]
            - NEO4J_dbms_security_procedures_unrestricted=apoc.*
            - NEO4J_dbms_memory_pagecache_size=8G
            - NEO4j_dbms_memory_heap_initial__size=8G
            - NEO4J_dbms_memory_heap_max__size=16G

    jupyterlab:
        container_name: jupyter_gs
        env_file:
            - .env
        build: ./notebooks
        ports:
            - "8888:8888"
        volumes:
            - ./notebooks:/home/jovyan/work
        links:
            - neo4j

    timescale:
        image: timescale/timescaledb:latest-pg12
        container_name: timescale
        restart: unless-stopped
        ports:
            - 5432:5432
        environment:
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=${DB_NAME}
        volumes:
            - ./dbs/pgts:/var/lib/postgresql/data
    
    pgadmin:
        container_name: pgadmin
        image: dpage/pgadmin4
        environment:
            - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
            - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
        ports:
            - 5050:80
        depends_on:
            - timescale
    
    # app:
    #     container_name: app
    #     build: .
    #     command: bash -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    #     volumes:
    #         - .:/app
    #     ports:
    #         - 8000:8000
    #     restart: always
    #     depends_on:
    #         - db
    
    # redis:
    #     container_name: redis
    #     image: redis:6.2-alpine
    
    # celery_worker:
    #     container_name: celery_worker
    #     build: .
    #     command: celery -A celery_worker.celery worker --loglevel=info
    #     volumes:
    #         - .:/app
    #     environment:
    #         - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    #         - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    #     depends_on:
    #         - app
    #         - redis
    
    # flower:
    #     container_name: flower
    #     build: .
    #     command: celery -A celery_worker.celery flower --port=5555
    #     ports:
    #         - 5556:5555
    #     environment:
    #         - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    #         - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    #     depends_on:
    #         - app
    #         - redis
    #         - celery_worker